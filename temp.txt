import sys
import pygame
from pygame.math import Vector2
from line import Line
from pointMass import MassPoint
from constants import black, WIDTH, HEIGHT, FPS, SPEED, white


def init():
    global size, clock, screen, objects, particles, walls
    # Create a Screen object and 'objects' dictionary
    # 'objects' will contain all physical entities of the simulation
    pygame.init()
    size = Vector2(WIDTH, HEIGHT)  # See constants.WIDTH
    clock = pygame.time.Clock()
    screen = pygame.display.set_mode(size=size)
    objects = {}
    particles = []
    walls = []


# declare() function is for configuration, it initialises objects used in the simulation
def declare():
    global objects, particles, walls
    objects["ground"] = Line(point=Vector2(0, 100), alpha=-15, elasticity=0.9)
    objects['wall'] = Line(point=Vector2(1000, 0), alpha=90, elasticity=0.9)
    objects['small_wall'] = Line(start=Vector2(100, 15), end=Vector2(100, 100))
    objects['small_wall2'] = Line(start=Vector2(200, 15), end=Vector2(200, 100))

    objects["point_1"] = MassPoint(mass=1, pos=Vector2(5, 0), vel=Vector2(70, 0), color=(255, 0, 0), width=5,
                                   show_trajectory=True, trajectory_color=(50, 50, 200))
    objects["point_2"] = MassPoint(mass=1, pos=Vector2(5, 0), vel=Vector2(70, 2), color=(0, 255, 0), width=5,
                                   show_trajectory=True, trajectory_color=(200, 50, 50))
    objects["point_3"] = MassPoint(mass=1, pos=Vector2(5, 0), vel=Vector2(70, 4), color=(0, 255, 0), width=5,
                                   show_trajectory=True, trajectory_color=(200, 50, 50))
    objects["point_4"] = MassPoint(mass=1, pos=Vector2(5, 0), vel=Vector2(70, 6), color=(0, 255, 0), width=5,
                                   show_trajectory=True, trajectory_color=(200, 50, 50))
    objects["point_5"] = MassPoint(mass=1, pos=Vector2(5, 0), vel=Vector2(70, 8), color=(0, 255, 0), width=5,
                                   show_trajectory=True, trajectory_color=(200, 50, 50))
    objects["point_6"] = MassPoint(mass=1, pos=Vector2(5, 0), vel=Vector2(70, -2), color=(0, 255, 0), width=5,
                                   show_trajectory=True, trajectory_color=(200, 50, 50))
    objects["point_7"] = MassPoint(mass=1, pos=Vector2(5, 0), vel=Vector2(70, -4), color=(0, 255, 0), width=5,
                                   show_trajectory=True, trajectory_color=(200, 50, 50))
    objects["point_8"] = MassPoint(mass=1, pos=Vector2(5, 0), vel=Vector2(70, -6), color=(0, 255, 0), width=5,
                                   show_trajectory=True, trajectory_color=(200, 50, 50))

    for obj in objects.values():
        if obj.is_particle:
            particles.append(obj)
        else:
            walls.append(obj)


def collide():
    for particle in particles:
        for wall in walls:
            particle.collide(surface=wall)


def tick(t0):
    for obj in particles:
        obj.tick(t=t0)


def draw():
    screen.fill(black)
    for obj in objects.values():
        obj.draw(screen=screen)
    draw_speed_bar()
    pygame.display.flip()


def draw_speed_bar():
    start = Vector2(50, HEIGHT - 50)
    speed_level = 2**(-SPEED)
    size = Vector2(100 * speed_level, 25) if speed_level <= 4 else Vector2(400, 25)
    color = white if speed_level <= 3 else (255, 255 - (speed_level - 3)*25, 255 - (speed_level - 3)*25)
    screen.fill(color, pygame.Rect(start, size))


# Gets eventual user input and acts accordingly
# For now, it just checks if user tried to close the window, an if so, it terminates the program
def handle_events():
    global paused, SPEED
    for event in pygame.event.get():  # Exit
        if event.type == pygame.QUIT:
            sys.exit(0)
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                sys.exit(0)
            elif event.key == pygame.K_SPACE:
                paused = not paused
            elif event.key == pygame.K_LEFT:
                SPEED *= 0.5
            elif event.key == pygame.K_RIGHT:
                SPEED *= 2

init()
declare()
collide()
print("Initialization Complete")
paused = False
while True:
    handle_events()
    if not paused:
        tn = pygame.time.get_ticks()/FPS/100*SPEED
        tick(t0=tn)
        draw()
        clock.tick(FPS*SPEED)
